[1mdiff --git a/base/package.yaml b/base/package.yaml[m
[1mindex 41676b5..6db91ec 100644[m
[1m--- a/base/package.yaml[m
[1m+++ b/base/package.yaml[m
[36m@@ -20,8 +20,9 @@[m [mlibrary:[m
     - Models.Sample[m
     - Interpolate[m
     - Types[m
[31m-    - Types.Internal[m
[32m+[m[32m    - Types.DistanceMeasures[m
     - Types.Magnitude[m
[32m+[m[32m    - Types.Internal[m
   dependencies:[m
     - base >=4.10 && <5[m
     - BayesianStellarEvolution-Models[m
[1mdiff --git a/base/src/Models/Input.hs b/base/src/Models/Input.hs[m
[1mdeleted file mode 100644[m
[1mindex c3286d6..0000000[m
[1m--- a/base/src/Models/Input.hs[m
[1m+++ /dev/null[m
[36m@@ -1,56 +0,0 @@[m
[31m-module Models.Input ( loadModels[m
[31m-                    , convertModels[m
[31m-                    , fetchCompactModel[m
[31m-                    , Model[m
[31m-                    , RawModel[m
[31m-                    , module Paths) where[m
[31m-[m
[31m--- Replace this with the `compact` library?[m
[31m-import GHC.Compact[m
[31m-[m
[31m-import Conduit[m
[31m-[m
[31m-import Data.Conduit.Lzma[m
[31m-import Data.Set          (Set)[m
[31m-import Data.Text         (Text)[m
[31m-[m
[31m-import qualified Data.Map.Strict as M[m
[31m-import qualified Data.Set as S (toList)[m
[31m-import qualified Data.Vector.Unboxed as V[m
[31m-[m
[31m-import MainSequenceModel[m
[31m-import Paths[m
[31m-import Types[m
[31m-import Types.Internal[m
[31m-[m
[31m-[m
[31m-[m
[31m-type RawModel = [(([Text], Double, Double), Set Age)][m
[31m-type Model    = M.Map FeH (M.Map HeliumFraction (M.Map LogAge Isochrone))[m
[31m-[m
[31m-loadModels :: (MonadThrow m, HasModelPath p, MonadUnliftIO m) => p -> m RawModel[m
[31m-loadModels model = runConduitRes $ loadModel .| sinkList[m
[31m-  where loadModel = sourceFile (modelPath model "models/") .| decompress Nothing .| lexModel .| parseModel[m
[31m-[m
[31m-[m
[31m-convertModels :: RawModel -> Model[m
[31m-convertModels = M.fromListWith (M.union) . map go[m
[31m-  where go ((filters, f, y), isochrone) =[m
[31m-          let f'  = MkFeH . packLog $ f[m
[31m-              y'    = MkHeliumFraction . MkPercentage . closedUnitInterval' $ y[m
[31m-              iso'  = M.fromList . map (repackAge filters) . S.toList $ isochrone[m
[31m-          in (f', M.insert y' iso' mempty)[m
[31m-        repackAge filters (Age age eeps masses magnitudes) =[m
[31m-          let age'    = MkLogAge . packLog $ age[m
[31m-              eeps'   = V.map toEnum eeps[m
[31m-              masses' = repackMass masses[m
[31m-              mags'   = repackMags filters magnitudes[m
[31m-          in (age', Isochrone eeps' masses' mags')[m
[31m-        repackMass v = V.map (MkMass . nonNegative') v[m
[31m-        repackMags filters v =[m
[31m-          let filterSets = map (V.map (MkAbsoluteMagnitude . packLog)) v[m
[31m-          in M.fromList $ zip filters filterSets[m
[31m-[m
[31m-[m
[31m-fetchCompactModel :: HasModelPath p => p -> IO (Compact Model)[m
[31m-fetchCompactModel = (compact =<<) . fmap convertModels . loadModels[m
[1mdiff --git a/base/src/Models/Sample.hs b/base/src/Models/Sample.hs[m
[1mdeleted file mode 100644[m
[1mindex 88bbd79..0000000[m
[1m--- a/base/src/Models/Sample.hs[m
[1m+++ /dev/null[m
[36m@@ -1,77 +0,0 @@[m
[31m-{-# LANGUAGE OverloadedLists, OverloadedStrings #-}[m
[31m-module Models.Sample where[m
[31m-[m
[31m-import MainSequenceModel (Age(..))[m
[31m-[m
[31m-import Models.Input[m
[31m-[m
[31m-[m
[31m-dsed :: RawModel[m
[31m-dsed = [ ((["U", "B", "V"], -2.5, 0.2451)[m
[31m-         , [ Age 8.39794[m
[31m-                 [2, 3, 4, 5][m
[31m-                 [0.278163, 0.318852, 0.335466, 0.351598][m
[31m-                 [ [11.7478, 11.3514, 11.2028, 11.0572][m
[31m-                 , [11.0484, 10.7092, 10.5813, 10.4578][m
[31m-                 , [9.8499,  9.5412,  9.4241,  9.3119]][m
[31m-           , Age 8.477121[m
[31m-                 [2, 3, 4, 5][m
[31m-                 [0.212681, 0.290489, 0.320389, 0.335518][m
[31m-                 [ [12.5728, 11.6188, 11.3348, 11.2034][m
[31m-                 , [11.7446, 10.9382, 10.6947, 10.5822][m
[31m-                 , [10.4768, 9.7498,  9.5277,  9.4251]]])[m
[31m-       , ((["U", "B", "V"], -2.0, 0.2453)[m
[31m-         , [ Age 8.397940[m
[31m-                 [2, 3, 4, 5][m
[31m-                 [0.297801, 0.335484, 0.338823, 0.355097][m
[31m-                 [ [12.1589, 11.8031, 11.7674, 11.5974][m
[31m-                 , [11.2562, 10.9432, 10.9126, 10.7646][m
[31m-                 , [9.9655,  9.6821,  9.6546,  9.5203]][m
[31m-           , Age 8.477121[m
[31m-                 [2, 3, 4, 5][m
[31m-                 [0.251276, 0.317207, 0.335075, 0.337718][m
[31m-                 [ [12.6621, 11.9778, 11.8076, 11.7862][m
[31m-                 , [11.6918, 11.0959, 10.9477, 10.9296][m
[31m-                 , [10.3548, 9.8205,  9.6866,  9.6705]]])][m
[31m-[m
[31m-[m
[31m-newDsed :: RawModel[m
[31m-newDsed = [ ((["U", "B", "V"], -1.0, 0.247800)[m
[31m-            , [ Age 9.0[m
[31m-                    [2, 3, 4, 5][m
[31m-                    [0.113315, 0.124680, 0.140813, 0.173692][m
[31m-                    [ [17.03370, 16.62740, 16.12280, 15.25250][m
[31m-                    , [15.03530, 14.70540, 14.29240, 13.58510][m
[31m-                    , [13.23850, 12.93440, 12.55550, 11.92120]][m
[31m-              , Age 9.096910[m
[31m-                     [2, 3, 4, 5][m
[31m-                     [0.103069, 0.113581, 0.125209, 0.141832][m
[31m-                     [ [17.44610, 17.02400, 16.60920, 16.09250][m
[31m-                     , [15.36540, 15.02750, 14.69060, 14.26770][m
[31m-                     , [13.54260, 13.23130, 12.92070, 12.53310]]])[m
[31m-          , ((["U", "B", "V"], -1.0, 0.330000)[m
[31m-            , [ Age 9.0[m
[31m-                    [5, 6, 7, 8][m
[31m-                    [0.152464, 0.191656, 0.235299, 0.256241][m
[31m-                    [ [15.419500, 14.543400, 13.869200, 13.588700][m
[31m-                    , [13.755500, 13.026700, 12.446300, 12.202200][m
[31m-                    , [12.094600, 11.447100, 10.926900, 10.706600]][m
[31m-              , Age 9.096910[m
[31m-                    [5, 6, 7, 8][m
[31m-                    [0.128684, 0.153000, 0.191846, 0.232007][m
[31m-                    [ [16.111100, 15.404500, 14.537700, 13.908700][m
[31m-                    , [14.322000, 13.743300, 13.021800, 12.480500][m
[31m-                    , [12.603800, 12.083700, 11.442800, 10.957500]]])[m
[31m-          , ((["U", "B", "V"], -0.5, 0.25370)[m
[31m-            , [ Age 9.0[m
[31m-                    [2, 3, 4, 5][m
[31m-                    [0.116263, 0.130317, 0.152523, 0.194038][m
[31m-                    [ [16.931000, 16.564000, 16.068000, 15.288200][m
[31m-                    , [15.136300, 14.815400, 14.381800, 13.705100][m
[31m-                    , [13.420600, 13.116000, 12.706400, 12.077400]][m
[31m-              , Age 9.096910[m
[31m-                    [2, 3, 4, 5][m
[31m-                    [0.104591, 0.116666, 0.131087, 0.153961][m
[31m-                    [ [17.276200, 16.919900, 16.544800, 16.038100][m
[31m-                    , [15.436600, 15.126700, 14.798700, 14.355800][m
[31m-                    , [13.705400, 13.411400, 13.100200, 12.682000]]])][m
