{-# LANGUAGE OverloadedLists, OverloadedStrings #-}
module Models.Sample where

import Data.ByteString (ByteString)
import qualified Data.Set as S

import MainSequenceModel (Age(..))


type RawModel = [(([ByteString], Double, Double), S.Set Age)]

dsed :: RawModel
dsed = [ ((["U", "B", "V"], -2.5, 0.2451)
         , [ Age 8.39794
                 [2, 3, 4, 5]
                 [0.278163, 0.318852, 0.335466, 0.351598]
                 [ [11.7478, 11.3514, 11.2028, 11.0572]
                 , [11.0484, 10.7092, 10.5813, 10.4578]
                 , [9.8499,  9.5412,  9.4241,  9.3119]]
           , Age 8.477121
                 [2, 3, 4, 5]
                 [0.212681, 0.290489, 0.320389, 0.335518]
                 [ [12.5728, 11.6188, 11.3348, 11.2034]
                 , [11.7446, 10.9382, 10.6947, 10.5822]
                 , [10.4768, 9.7498,  9.5277,  9.4251]]])
       , ((["U", "B", "V"], -2.0, 0.2453)
         , [ Age 8.397940
                 [2, 3, 4, 5]
                 [0.297801, 0.335484, 0.338823, 0.355097]
                 [ [12.1589, 11.8031, 11.7674, 11.5974]
                 , [11.2562, 10.9432, 10.9126, 10.7646]
                 , [9.9655,  9.6821,  9.6546,  9.5203]]
           , Age 8.477121
                 [2, 3, 4, 5]
                 [0.251276, 0.317207, 0.335075, 0.337718]
                 [ [12.6621, 11.9778, 11.8076, 11.7862]
                 , [11.6918, 11.0959, 10.9477, 10.9296]
                 , [10.3548, 9.8205,  9.6866,  9.6705]]])]


new_dsed :: RawModel
new_dsed = [ ((["U", "B", "V"], -1.0, 0.247800)
             , [ Age 9.0
                     [2, 3, 4, 5]
                     [0.113315, 0.124680, 0.140813, 0.173692]
                     [ [17.03370, 16.62740, 16.12280, 15.25250]
                     , [15.03530, 14.70540, 14.29240, 13.58510]
                     , [13.23850, 12.93440, 12.55550, 11.92120]]
               , Age 9.096910
                      [2, 3, 4, 5]
                      [0.103069, 0.113581, 0.125209, 0.141832]
                      [ [17.44610, 17.02400, 16.60920, 16.09250]
                      , [15.36540, 15.02750, 14.69060, 14.26770]
                      , [13.54260, 13.23130, 12.92070, 12.53310]]])
           , ((["U", "B", "V"], -1.0, 0.330000)
             , [ Age 9.0
                     [5, 6, 7, 8]
                     [0.152464, 0.191656, 0.235299, 0.256241]
                     [ [15.419500, 14.543400, 13.869200, 13.588700]
                     , [13.755500, 13.026700, 12.446300, 12.202200]
                     , [12.094600, 11.447100, 10.926900, 10.706600]]
               , Age 9.096910
                     [5, 6, 7, 8]
                     [0.128684, 0.153000, 0.191846, 0.232007]
                     [ [16.111100, 15.404500, 14.537700, 13.908700]
                     , [14.322000, 13.743300, 13.021800, 12.480500]
                     , [12.603800, 12.083700, 11.442800, 10.957500]]])
           , ((["U", "B", "V"], -1.0, 0.330000)
             , [ Age 9.0
                     [2, 3, 4, 5]
                     [0.116263, 0.130317, 0.152523, 0.194038]
                     [ [16.931000, 16.564000, 16.068000, 15.288200]
                     , [15.136300, 14.815400, 14.381800, 13.705100]
                     , [13.420600, 13.116000, 12.706400, 12.077400]]
               , Age 9.096910
                     [2, 3, 4, 5]
                     [0.104591, 0.116666, 0.131087, 0.153961]
                     [ [17.276200, 16.919900, 16.544800, 16.038100]
                     , [15.436600, 15.126700, 14.798700, 14.355800]
                     , [13.705400, 13.411400, 13.100200, 12.682000]]])]
